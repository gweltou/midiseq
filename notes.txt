## Test de réemploi après des mois sans utilisation

J'ouvre un terminal, démarre iPython et importe la librairie

  from miditool import *

Il m'indique qu'il a ouvert un port midi :

  Opening port 0 [Midi Through:Midi Through Port-0 14:0]

Si je regarde le contenu de la variable `midi_out`, je trouve une description différente :

  {'default': <rtmidi._rtmidi.MidiOut at 0x7f98fe3e4310>}

Pareil pour `env.DEFAULT_OUTPUT`

  <rtmidi._rtmidi.MidiOut at 0x7f98fe3e4310>

J'essaye de jouer l'objet Song ouvert par défaut dans `midi_file`

  play(midi_file)

Ça ne marche pas. Par contre la commande suivante fonctionne (mais pas de son) :

  play(Seq("do re mi"))

Commande `listOutputs()` pour afficher la liste des ports midi.

Confusions entre `getOutputs` et `listOutputs`. Laquelle utiliser ? Ne pourrait-il pas n'y avoir qu'une seule fonction de ce genre ?


### Conclusions:

Créer une classe autour de rtmidi.MidiOut avec une fonction `str` pour correctement nommer les ports midi

Implémenter l'opérateur `%` pour les divisions temporelles des notes dans une séquence, par ex :

  Seq("do re mi") % 1/4

Ou bien:

  s = Note(45, 1/4) + Note(56)%1/2

Ou bien :

  s = Seq("do%0.5 re%2 mi-1%1/4")

On voudrait un opérateur pour raccourcir ou ralonger la durée des notes dans une séquence. Ça pourraît être l'opérateur '%', qui ne changerait pas la longueur d'une séquence. L'argument suivant '%' serait en fraction de la durée actuelle de chaque note.


## Idées

	Seq().wrap() # Les notes qui dépassent la longeur de la séquence sont replacées sur la durée de la séquence

Dans les séquences textuelles:

	Seq( "do re6 (mi sol) (0 mi 0)" ) -> 'mi sol' est


## Revamp de la fonction `getNotesFromString`

Déjà, est-ce qu'on ne pourraît pas la rebaptiser `str2seq` ou un truc dans le genre ?
L'idée serait de proposer un micro language, permettant de définir une Séquence entière avec un maximum d'option sous la forme d'une chaîne de caractères.

La fonction `getNotesFromString` fait appel à la fonction `noteToPitch` pour traduire chaque symbole de note.

La fonction actuelle est utilisée par le constructeur de la classe `Chord` et par la méthode `addNotes` de la classe `Seq`.

La méthode `addNotes` est utilisée par le constructeur de la classe `Seq`.
Lorsqu'on lui passe une liste ou un tuple de notes, la méthode `addNotes` prend en charge la présence de sous-listes ou sous-tuples pour créer des duolets/triolets (tuplets in english).

### String sequences

	s = "do ré mi fa sol"
	s = "c d e f g"
	s = "d# lab"	# dièse et bémol
	s = "6c -1ré"	# On précise l'octave (absolute or relative)
	# s = "c-1 mi+2"	# offset de l'octave par rapport à l'octave par défaut (conflit avec les autres notations, notamment le bémol)

	"+1C#+7%1/4" -> A C sharp augmented seventh chord transposed by +1 octave and with 1/4 duration

#### Silences

Silences can be added in a string sequence with dots `.`. Many silences can be chained by concanetating the dots together.

Thus, `. . . .` is equivalent to `....`.

#### Chords

Chords use capital letters.

Possible chords:
	Triads: "C" (major), "Cm" (minor), "C+" (augmented), "C°" (diminished)
	Seventh: "C7" (dominant seventh), "CM7" (major seventh), "Cm7" (minor seventh), "C+7" (augmented seventh)
	Ninth: "C9" (dominant ninth), "CM9" (major ninth)
	
	https://en.wikipedia.org/wiki/Chord_notation

Un accord pourrait aussi être défini par les notes qui le compose, séparé par le symbole de division `/`

	"C/a#/b#"	-> accord de C majeur + la dièse + si dièse
	
#### Time subdivision

A note's duration can be subdivided by suffixing it with the `%`, symbol followed by a factor applied to the default duration of the note.

	"c#%.5" divides the note's duration by two
	"d%1/3" divides the note's duration by three

#### Tuplets

Les tuplets se définissent par une série de notes séparées par un underscore `_`

	"d_b4_a#"

